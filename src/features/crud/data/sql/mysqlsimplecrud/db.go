// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0

package mysqlsimplecrud

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createDepartmentStmt, err = db.PrepareContext(ctx, createDepartment); err != nil {
		return nil, fmt.Errorf("error preparing query CreateDepartment: %w", err)
	}
	if q.createEmployeeStmt, err = db.PrepareContext(ctx, createEmployee); err != nil {
		return nil, fmt.Errorf("error preparing query CreateEmployee: %w", err)
	}
	if q.deleteDepartmentStmt, err = db.PrepareContext(ctx, deleteDepartment); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteDepartment: %w", err)
	}
	if q.deleteEmployeeStmt, err = db.PrepareContext(ctx, deleteEmployee); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteEmployee: %w", err)
	}
	if q.getAllDepartmentsStmt, err = db.PrepareContext(ctx, getAllDepartments); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllDepartments: %w", err)
	}
	if q.getAllEmployeesStmt, err = db.PrepareContext(ctx, getAllEmployees); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllEmployees: %w", err)
	}
	if q.getDepartmentStmt, err = db.PrepareContext(ctx, getDepartment); err != nil {
		return nil, fmt.Errorf("error preparing query GetDepartment: %w", err)
	}
	if q.getDepartmentEmployeesStmt, err = db.PrepareContext(ctx, getDepartmentEmployees); err != nil {
		return nil, fmt.Errorf("error preparing query GetDepartmentEmployees: %w", err)
	}
	if q.getEmployeeStmt, err = db.PrepareContext(ctx, getEmployee); err != nil {
		return nil, fmt.Errorf("error preparing query GetEmployee: %w", err)
	}
	if q.updateDepartmentStmt, err = db.PrepareContext(ctx, updateDepartment); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateDepartment: %w", err)
	}
	if q.updateEmployeeStmt, err = db.PrepareContext(ctx, updateEmployee); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateEmployee: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createDepartmentStmt != nil {
		if cerr := q.createDepartmentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createDepartmentStmt: %w", cerr)
		}
	}
	if q.createEmployeeStmt != nil {
		if cerr := q.createEmployeeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createEmployeeStmt: %w", cerr)
		}
	}
	if q.deleteDepartmentStmt != nil {
		if cerr := q.deleteDepartmentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteDepartmentStmt: %w", cerr)
		}
	}
	if q.deleteEmployeeStmt != nil {
		if cerr := q.deleteEmployeeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteEmployeeStmt: %w", cerr)
		}
	}
	if q.getAllDepartmentsStmt != nil {
		if cerr := q.getAllDepartmentsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllDepartmentsStmt: %w", cerr)
		}
	}
	if q.getAllEmployeesStmt != nil {
		if cerr := q.getAllEmployeesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllEmployeesStmt: %w", cerr)
		}
	}
	if q.getDepartmentStmt != nil {
		if cerr := q.getDepartmentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDepartmentStmt: %w", cerr)
		}
	}
	if q.getDepartmentEmployeesStmt != nil {
		if cerr := q.getDepartmentEmployeesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDepartmentEmployeesStmt: %w", cerr)
		}
	}
	if q.getEmployeeStmt != nil {
		if cerr := q.getEmployeeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEmployeeStmt: %w", cerr)
		}
	}
	if q.updateDepartmentStmt != nil {
		if cerr := q.updateDepartmentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateDepartmentStmt: %w", cerr)
		}
	}
	if q.updateEmployeeStmt != nil {
		if cerr := q.updateEmployeeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateEmployeeStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                         DBTX
	tx                         *sql.Tx
	createDepartmentStmt       *sql.Stmt
	createEmployeeStmt         *sql.Stmt
	deleteDepartmentStmt       *sql.Stmt
	deleteEmployeeStmt         *sql.Stmt
	getAllDepartmentsStmt      *sql.Stmt
	getAllEmployeesStmt        *sql.Stmt
	getDepartmentStmt          *sql.Stmt
	getDepartmentEmployeesStmt *sql.Stmt
	getEmployeeStmt            *sql.Stmt
	updateDepartmentStmt       *sql.Stmt
	updateEmployeeStmt         *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                         tx,
		tx:                         tx,
		createDepartmentStmt:       q.createDepartmentStmt,
		createEmployeeStmt:         q.createEmployeeStmt,
		deleteDepartmentStmt:       q.deleteDepartmentStmt,
		deleteEmployeeStmt:         q.deleteEmployeeStmt,
		getAllDepartmentsStmt:      q.getAllDepartmentsStmt,
		getAllEmployeesStmt:        q.getAllEmployeesStmt,
		getDepartmentStmt:          q.getDepartmentStmt,
		getDepartmentEmployeesStmt: q.getDepartmentEmployeesStmt,
		getEmployeeStmt:            q.getEmployeeStmt,
		updateDepartmentStmt:       q.updateDepartmentStmt,
		updateEmployeeStmt:         q.updateEmployeeStmt,
	}
}
