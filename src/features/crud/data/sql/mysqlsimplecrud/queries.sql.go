// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: queries.sql

package mysqlsimplecrud

import (
	"context"
	"database/sql"
)

const createDepartment = `-- name: CreateDepartment :execresult
INSERT INTO department (name) VALUES (?)
`

func (q *Queries) CreateDepartment(ctx context.Context, name string) (sql.Result, error) {
	return q.exec(ctx, q.createDepartmentStmt, createDepartment, name)
}

const createEmployee = `-- name: CreateEmployee :execresult
INSERT INTO employee (name, department_id) VALUES (?, ?)
`

type CreateEmployeeParams struct {
	Name         string
	DepartmentID int32
}

func (q *Queries) CreateEmployee(ctx context.Context, arg CreateEmployeeParams) (sql.Result, error) {
	return q.exec(ctx, q.createEmployeeStmt, createEmployee, arg.Name, arg.DepartmentID)
}

const deleteDepartment = `-- name: DeleteDepartment :execresult
DELETE FROM department WHERE id = ?
`

func (q *Queries) DeleteDepartment(ctx context.Context, id int32) (sql.Result, error) {
	return q.exec(ctx, q.deleteDepartmentStmt, deleteDepartment, id)
}

const deleteEmployee = `-- name: DeleteEmployee :execresult
DELETE FROM employee WHERE id = ?
`

func (q *Queries) DeleteEmployee(ctx context.Context, id int32) (sql.Result, error) {
	return q.exec(ctx, q.deleteEmployeeStmt, deleteEmployee, id)
}

const getAllDepartments = `-- name: GetAllDepartments :many
SELECT 
    id, name
FROM 
    department d
`

func (q *Queries) GetAllDepartments(ctx context.Context) ([]Department, error) {
	rows, err := q.query(ctx, q.getAllDepartmentsStmt, getAllDepartments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Department
	for rows.Next() {
		var i Department
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllEmployees = `-- name: GetAllEmployees :many
SELECT 
    e.id, e.name, e.department_id, d.name as department
FROM 
    employee e 
    left join department d on e.department_id = d.id
`

type GetAllEmployeesRow struct {
	ID           int32
	Name         string
	DepartmentID int32
	Department   sql.NullString
}

func (q *Queries) GetAllEmployees(ctx context.Context) ([]GetAllEmployeesRow, error) {
	rows, err := q.query(ctx, q.getAllEmployeesStmt, getAllEmployees)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllEmployeesRow
	for rows.Next() {
		var i GetAllEmployeesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.DepartmentID,
			&i.Department,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDepartment = `-- name: GetDepartment :one
SELECT 
    id, name
FROM
    department d
WHERE
    id = ?
`

func (q *Queries) GetDepartment(ctx context.Context, id int32) (Department, error) {
	row := q.queryRow(ctx, q.getDepartmentStmt, getDepartment, id)
	var i Department
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getDepartmentEmployees = `-- name: GetDepartmentEmployees :many
SELECT 
    e.id, e.name, e.department_id
FROM
    employee e
WHERE
    department_id = ?
`

func (q *Queries) GetDepartmentEmployees(ctx context.Context, id int32) ([]Employee, error) {
	rows, err := q.query(ctx, q.getDepartmentEmployeesStmt, getDepartmentEmployees, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Employee
	for rows.Next() {
		var i Employee
		if err := rows.Scan(&i.ID, &i.Name, &i.DepartmentID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEmployee = `-- name: GetEmployee :one
SELECT 
    e.id, e.name, e.department_id, d.name as department 
FROM 
    employee e 
    left join department d on e.department_id = d.id
WHERE 
    e.id = ?
`

type GetEmployeeRow struct {
	ID           int32
	Name         string
	DepartmentID int32
	Department   sql.NullString
}

func (q *Queries) GetEmployee(ctx context.Context, id int32) (GetEmployeeRow, error) {
	row := q.queryRow(ctx, q.getEmployeeStmt, getEmployee, id)
	var i GetEmployeeRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DepartmentID,
		&i.Department,
	)
	return i, err
}

const updateDepartment = `-- name: UpdateDepartment :execresult
UPDATE department SET name = ? WHERE id = ?
`

type UpdateDepartmentParams struct {
	Name string
	ID   int32
}

func (q *Queries) UpdateDepartment(ctx context.Context, arg UpdateDepartmentParams) (sql.Result, error) {
	return q.exec(ctx, q.updateDepartmentStmt, updateDepartment, arg.Name, arg.ID)
}

const updateEmployee = `-- name: UpdateEmployee :execresult
UPDATE employee SET name = ?, department_id = ? WHERE id = ?
`

type UpdateEmployeeParams struct {
	Name         string
	DepartmentID int32
	ID           int32
}

func (q *Queries) UpdateEmployee(ctx context.Context, arg UpdateEmployeeParams) (sql.Result, error) {
	return q.exec(ctx, q.updateEmployeeStmt, updateEmployee, arg.Name, arg.DepartmentID, arg.ID)
}
